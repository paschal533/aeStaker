{"address":"ct_SjV3mnz56BkpJdCQZfp1giwjNaHVqEt9EiKfBFbqBcbmdJyaC","bytecode":"cb_+Qf1RgOgcxsLkspNKutA6RD8Mv1oBp5rMo4wRiXZh0DFR//7fw3AuQfHuQYX/gnAbz0ANwIHBwcWFAACAP4QAumQADcBBzcAGgoAkFUAKxgAACgMAiAABwwE+wOhb25seSBwb3NpdGlvbiBjcmVhdG9yIG1heSBtb2RpZnkgcG9zaXRvbhoKBpArGAYAKAwOIDD/BwwI+wNJUG9zaXRpb24gaXMgY2xvc2VkKxoikAAp7A4ify0akJAAGgo8kCsYPAAoDAZYAB8ABwwMGgpAkCsYQAAoDApVAGUAGgpCkAwBAFUAKxhCACgMCkT8QwYGBgYCBgQDEWWl4A8aCkCQGgpCkCsYQgAoDAwXMG+CJtArGEAAKAwKFAJEVQBlCEQMAQBVAAwCRET8QwYGBgYCBgQDEWWl4A/+HKYokQA3AAdVAHMAAP4g03pUADcAB3MIhAD+JKb++wQ3AQc3ABoKAIgrGAAAHzAABwwE+wNFTWFwcGluZyBub3QgZm91bmQWNABvgwFRQFgAFAIMGgoOiBoKFIgLACsYFAACAxEJwG89DwIUDAKGVQBYAAwCDCsYDgALAAwCFAwD/ycMEA8CFhoKLoYtqpCQLhYRAoZVAngs6nqWeAMaCnyGNDh8AzkIei0qlpZ4CwBeAGUAGgpvFogMAoZVAAsAKxhvFgACAxEJwG89RPxDBgYGBgAGBAMRZaXgD/4puHBqADcBBwcrGIoAAP4pzzVZADcABwEChv5E1kQfADcANwAaDgQvAC34BG90b4IEcC3wbxpvggOoLfIGPG+CAnwaDggvAC34CARvdC3wAm8aLfKKADwaDpAvABoOki8AGg6ULwAaDpYvAFUCgl4ChBoOhgAaCogGGg6MBhoOjgIBAz/+ZaXgDwI3AYcENwMHRwAHNwMHRwAHNwNHAAcHNwNHAAcXNwAKDQBDAgQGCEY2AAAARjYCAAJGNgQABGQCr1+fAYGQfuCbCfEocCky4r+OuiiUFuCizfQuDgyhkre1luCCXAACBAEDP0Y2AAAARjYCAAJGNgQABGQCr1+fAYHGl2hblAZmV/5lBw2bKThDiegnd2zV8OInAlLPt+nPFAACBAEDP0Y2AAAARjYCAAJGNgQABGQCr1+fAYGQJCqCRrR1QFRPWwS8OMn2vZry5WU+kPcTvh+wPpLMYAACBAEDP0Y2AAAARjYCAAJGNgQABGQCr1+fAYGyYgalrYSFfken/MRF4XphbRgY8JNWwV4+if48DPcKeAACBAEDP/53xZStADcBBwcrGIgAAP6aZNkeADcBBwcrGIgAAP6i/OAhADcBBzcIB0cABwcHBwcXKxiQAAD+qC20awA3AgcHNwBVACAgggcMBPsDmVRoZSBjYWxsZXIgaXMgZGlmZmVyZW50IHRoYW4gdGhlIG93bmVyLVqIiAACGgpKjC1qiopKABECjAEDP/6qcXBCADcDB0cABzcAVQAgCIIHDAT7A4FPbmx5IG93bmVyIGNhbiBjcmVhdGUgYSBib3Jyb3dlchY0BG+DAVFAWAAUAgoWHBAAFzIMbyQMAo4MAQJYAAwCCgwDb4IPYAwBAAwCDAwDfycMEA8CDhoKJo4tqpKSJg4aClaOLZqUlAJWDAECDAEADAKORPxDBgYGBgQGAgMRZaXgDw8Cb4ImzxECjmUFAgABAz/+yUiVjAA3AUcABysYlAAA/sorhpsENwFHADcAGgoAlCsYAAAfMAAHDAT7A0lLZXkgZG9lcyBub3QgZXhpc3QMAQACAxHJSJWMDwIGGgoIkhoKCpIrKAoGKAwKKygIBigMDBQCDAsAIiAMBwwK+wNZYW1vdW50IGlzIG5vdCBjb21wbGV0ZRoKEpIrKBIGKAwOIDB/BwwO+wNNZGVidHMgaGFzIGJlZW4gcGFpZCsqLpIGKewOLv8tKpKSBgsAXgBlABoKSpJeAAsAKyhKBigMDkT8QwYGBgYGBgQDEWWl4A/+1+EMsAA3AgcHNwBVACAIggcMBPsDkU9ubHkgb3duZXIgbWF5IG1vZGlmeSBzdGFraW5nIHBlcmlvZCsaHJAAKWwGHAItGpCQAAEDP/7fPZKLADcARwABAoT+50EB2gA3AUcAJwcrGJYAAP7+rqT6ADcARwABAoK5AacvFBEJwG89RWNhbGN1bGF0ZUludGVyZXN0ERAC6ZA1Y2xvc2VQb3NpdGlvbhEcpiiROWNhbGxlcl9iYWxhbmNlESDTelRFZ2V0Q29udGFjdEJhbGFuY2URJKb++x1zdGFrZUFFESm4cGpRY29udHJhY3RfbG9ja1BlcmlvZHMRKc81WWljb250cmFjdF9jdXJyZW50UG9zaXRpb25JZBFE1kQfEWluaXQRZaXgDy1DaGFpbi5ldmVudBF3xZStOWNvbnRyYWN0X3RpZXJzEZpk2R49Z2V0SW50ZXJlc3RSYXRlEaL84CE9Z2V0UG9zaXRpb25CeUlkEagttGtFbW9kaWZ5TG9ja1BlcmlvZHMRqnFwQi1ib3Jyb3dGdW5kcxHJSJWMYWdldFBvc2l0aW9uSWRGb3JCb3Jyb3dlchHKK4abPXBheUJvcnJvd2VkRnVuZBHX4QywQWNoYW5nZVVubG9ja0RhdGUR3z2Si0VnZXRDb250YWN0QWRkcmVzcxHnQQHaXWdldFBvc2l0aW9uSWRGb3JBZGRyZXNzEf6upPoVb3duZXKCLwCFNi4xLjABapiYGA==","aci":{"encodedAci":{"contract":{"event":{"variant":[{"Stake":["int","address","int"]},{"Withdraw":["int","address","int"]},{"Borrow":["address","int","int"]},{"Paid":["address","int","bool"]}]},"functions":[{"arguments":[],"name":"init","payable":false,"returns":"Stake.state","stateful":true},{"arguments":[],"name":"owner","payable":false,"returns":"address","stateful":false},{"arguments":[{"name":"value","type":"int"}],"name":"contract_tiers","payable":false,"returns":"int","stateful":false},{"arguments":[{"name":"value","type":"int"}],"name":"contract_lockPeriods","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"contract_currentPositionId","payable":false,"returns":"int","stateful":false},{"arguments":[{"name":"numDays","type":"int"}],"name":"stakeAE","payable":true,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"basisPoints","type":"int"},{"name":"aeAmount","type":"int"}],"name":"calculateInterest","payable":false,"returns":"int","stateful":false},{"arguments":[{"name":"numDays","type":"int"},{"name":"basisPoints","type":"int"}],"name":"modifyLockPeriods","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"value","type":"int"}],"name":"getInterestRate","payable":false,"returns":"int","stateful":false},{"arguments":[{"name":"positionId","type":"int"}],"name":"getPositionById","payable":false,"returns":"Stake.position","stateful":false},{"arguments":[{"name":"walletAddress","type":"address"}],"name":"getPositionIdForAddress","payable":false,"returns":{"list":["int"]},"stateful":false},{"arguments":[{"name":"walletAddress","type":"address"}],"name":"getPositionIdForBorrower","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"caller_balance","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"getContactAddress","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"getContactBalance","payable":false,"returns":"int","stateful":false},{"arguments":[{"name":"positionId","type":"int"},{"name":"newUnlockDate","type":"int"}],"name":"changeUnlockDate","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"positionId","type":"int"}],"name":"closePosition","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"amount","type":"int"},{"name":"sendTo","type":"address"},{"name":"endDate","type":"int"}],"name":"borrowFunds","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"borrower","type":"address"}],"name":"payBorrowedFund","payable":true,"returns":{"tuple":[]},"stateful":true}],"kind":"contract_main","name":"Stake","payable":true,"state":{"record":[{"name":"owner","type":"address"},{"name":"contract_address","type":"address"},{"name":"currentPositionId","type":"int"},{"name":"tiers","type":{"map":["int","int"]}},{"name":"lockPeriods","type":{"map":["int","int"]}},{"name":"lockPeriodsIndex","type":"int"},{"name":"borrowPositionId","type":"int"},{"name":"positions","type":{"map":["int","Stake.position"]}},{"name":"borrowers","type":{"map":["int","Stake.borrower"]}},{"name":"borrowerIdByAddress","type":{"map":["address","int"]}},{"name":"positionIdsByAddress","type":{"map":["address",{"list":["int"]}]}}]},"type_defs":[{"name":"position","typedef":{"record":[{"name":"positionId","type":"int"},{"name":"walletAddress","type":"address"},{"name":"createdDate","type":"int"},{"name":"unlockDate","type":"int"},{"name":"percentInterest","type":"int"},{"name":"aeStaked","type":"int"},{"name":"aeInterest","type":"int"},{"name":"open","type":"bool"}]},"vars":[]},{"name":"borrower","typedef":{"record":[{"name":"positionId","type":"int"},{"name":"walletAddress","type":"address"},{"name":"createdDate","type":"int"},{"name":"endDate","type":"int"},{"name":"percentInterest","type":"int"},{"name":"aeBorrowed","type":"int"},{"name":"aeInterest","type":"int"},{"name":"paid","type":"bool"}]},"vars":[]}]}},"externalEncodedAci":[{"namespace":{"name":"ListInternal","type_defs":[]}},{"namespace":{"name":"List","type_defs":[]}},{"namespace":{"name":"Option","type_defs":[]}}],"interface":"\n\n\npayable main contract Stake =\n  record state = {owner : address,contract_address : address,currentPositionId : int,tiers : map(int, int),lockPeriods : map(int, int),lockPeriodsIndex : int,borrowPositionId : int,positions : map(int, Stake.position),borrowers : map(int, Stake.borrower),borrowerIdByAddress : map(address, int),positionIdsByAddress : map(address, list(int))}\n  datatype event = Stake(int, address, int) | Withdraw(int, address, int) | Borrow(address, int, int) | Paid(address, int, bool)\n  record position = {positionId : int,walletAddress : address,createdDate : int,unlockDate : int,percentInterest : int,aeStaked : int,aeInterest : int,open : bool}\n  record borrower = {positionId : int,walletAddress : address,createdDate : int,endDate : int,percentInterest : int,aeBorrowed : int,aeInterest : int,paid : bool}\n  stateful entrypoint init : () => Stake.state\n  entrypoint owner : () => address\n  entrypoint contract_tiers : (int) => int\n  entrypoint contract_lockPeriods : (int) => int\n  entrypoint contract_currentPositionId : () => int\n  payable stateful entrypoint stakeAE : (int) => unit\n  entrypoint calculateInterest : (int, int) => int\n  stateful entrypoint modifyLockPeriods : (int, int) => unit\n  entrypoint getInterestRate : (int) => int\n  entrypoint getPositionById : (int) => Stake.position\n  entrypoint getPositionIdForAddress : (address) => list(int)\n  entrypoint getPositionIdForBorrower : (address) => int\n  entrypoint caller_balance : () => int\n  entrypoint getContactAddress : () => address\n  entrypoint getContactBalance : () => int\n  stateful entrypoint changeUnlockDate : (int, int) => unit\n  stateful entrypoint closePosition : (int) => unit\n  stateful entrypoint borrowFunds : (int, address, int) => unit\n  payable stateful entrypoint payBorrowedFund : (address) => unit\n"}}
